1. pod 10.130.8.14 has to send curl requests to below pods
ingress-0-1:[{[10.131.2.20 10.131.2.23 10.130.8.11 10.131.2.24 10.130.8.13] [8080]}]
ingress-0-2:[{[10.131.2.20 10.131.2.23 10.130.8.11 10.131.2.24 10.130.8.13] [8080]}]
ingress-0-10:[{[10.131.2.20 10.131.2.23 10.130.8.11 10.131.2.24 10.130.8.13] [8080]}]

ingress-1-1:[{[10.130.8.17 10.130.8.15 10.131.2.26 10.131.2.28] [8080]}]
ingress-1-2:[{[10.130.8.17 10.130.8.15 10.131.2.26 10.131.2.28] [8080]}]

2. 
ingress-0-1 IN namespace-0,namespace-1,namespace-2,namespace-3,namespace-4
ingress-0-2 IN namespace-0,namespace-1,namespace-2,namespace-3,namespace-5
ingress-0-3 IN namespace-0,namespace-1,namespace-2,namespace-3,namespace-6
ingress-0-4 IN namespace-0,namespace-1,namespace-2,namespace-3,namespace-7
ingress-0-5 IN namespace-0,namespace-1,namespace-2,namespace-3,namespace-8
ingress-0-6 IN namespace-0,namespace-1,namespace-2,namespace-3,namespace-9
ingress-0-7 IN namespace-0,namespace-1,namespace-2,namespace-4,namespace-5
ingress-0-8 IN namespace-0,namespace-1,namespace-2,namespace-4,namespace-6
ingress-0-9 IN namespace-0,namespace-1,namespace-2,namespace-4,namespace-7
ingress-0-10 IN namespace-0,namespace-1,namespace-2,namespace-3,namespace-8


ingress-0-1 IN namespace-0,namespace-1,namespace-2,namespace-3,namespace-4
namespace ns-1 with pod1 with ip 10.130.8.13
namespace ns-1 with pod1 with ip 10.130.8.13
namespace ns-1 with pod1 with ip 10.130.8.13
namespace ns-1 with pod1 with ip 10.130.8.13
namespace ns-1 with pod1 with ip 10.130.8.13
namespace ns-1 with pod1 with ip 10.130.8.13
namespace ns-1 with pod1 with ip 10.130.8.13
namespace ns-1 with pod1 with ip 10.130.8.13
ingress-0-2 IN 0,1,2,3,5
ingress-0-3 IN 0,1,2,3,6
ingress-0-4 IN 0,1,2,3,7
ingress-0-5 IN 0,1,2,3,8
ingress-0-6 IN 0,1,2,3,9
ingress-0-7 IN 0,1,2,4,5
ingress-0-8 IN 0,1,2,4,6
ingress-0-9 IN 0,1,2,4,7
ingress-0-10 IN 0,1,2,4,8

ingress-1-1 IN 0,1,2,4,9
ingress-1-2 IN 0,1,2,5,6
ingress-1-3 IN 0,1,2,5,7
ingress-1-4 IN 0,1,2,5,8
ingress-1-5 IN 0,1,2,5,9
ingress-1-6 IN 0,1,2,6,7
ingress-1-7 IN 0,1,2,6,8
ingress-1-8 IN 0,1,2,6,9
ingress-1-9 IN 0,1,2,7,8
ingress-1-10 IN 0,1,2,7,9

 

2. This is how capture latency for each inggress policy
name: ingress-0-3 latency slice: [3909 3933 3944 5516 5526 4949 4979 5021 5066 5071 3396 3398 3432 3479 3485 3581 3590 3619 3626 3635 3986 4027 4130 4155 4548 3133 3138 3142 3164 5634 5640 5641 5643 5644 5018 5028 5085 5122 6102 6343 6408 6409 6428 6431 3459 3496 3504 3508 3869 5959 5963 5969 5711 5734 5735 5783 5784 3146 3263 3269 3271 3927 3986 4009 4531 4546 2924 3126 3133 3137 3196 3547 3551 3554 3556 3569 6037 6096 6100 6259 6301 6329 6335 6337 6339 6340 6172 6228 6253 6290 6307 3128 3184 3294 3360 3440 3463 3472 3498 3506 6485 6486 6504 6536 6543 5460 5596 5639 5683 5704 4988 4989 4995 5003 5005 3109 3190 3327 3331 3415]

3. Nadia is trying 100 to 500 network policy per namespace. Max customer is using 50 netpol per ns. So we can try max 100 netpol per ns starting from 10.
How each netpolicy in ns is different from another- by port number
check with ns as well

Minimum 24 nodes, so we will have 240 ns. So each namespace can have 240 remote ns if needed. We can distribute these 240 among netpol.
10 netpol, each netpol 24 ns
20 netpol, each netpol 12 ns
30 netpol, each netpol 8 ns
40 netpol, each netpol 6 ns
90 netpol, each netpol 3 ns
let each netpol 3 ns, 1 single port

Use differenrt port if we are using same peer ns in a single ns.

Avoid using same peer adddress:pot comination in ingress rules of a namespace

for testport in testports:
 for 5pods in pods:
  ns = (startns, endns)
  for 5ns in ns:
    if ingress == 100:
      break
      ingress++
      nselctor in [5ns]
      pselector in [5ps]
    lastns = 5ns


when test creates multiple network polcicies for each namespace, the template renders similar configuration in each network policy. Enhanced it to use different configuration
ingress-0-1 Allow from namespace-0,namespace-1,namespace-2,namespace-3,namespace-4
ingress-0-2 Allow from namespace-0,namespace-1,namespace-2,namespace-3,namespace-5
ingress-0-3 Allow from namespace-0,namespace-1,namespace-2,namespace-3,namespace-6
ingress-0-4 Allow from namespace-0,namespace-1,namespace-2,namespace-3,namespace-7
ingress-0-5 Allow from namespace-0,namespace-1,namespace-2,namespace-3,namespace-8
ingress-0-6 Allow from namespace-0,namespace-1,namespace-2,namespace-3,namespace-9
ingress-0-7 Allow from namespace-0,namespace-1,namespace-2,namespace-4,namespace-5
ingress-0-8 Allow from namespace-0,namespace-1,namespace-2,namespace-4,namespace-6
ingress-0-9 Allow from namespace-0,namespace-1,namespace-2,namespace-4,namespace-7
ingress-0-10 Allow from namespace-0,namespace-1,namespace-2,namespace-3,namespace-8

User defined network testing
Captured results from Mohit's previous runs into gsheet
https://docs.google.com/spreadsheets/d/1rEGxbW0aWx5c9rVHZMD_rrzb_ICk_FlmaJ-toIQKN8s/edit?usp=sharing
UDN CRD is ready (till now using net-attach-def) for UDN testing
 
Template is using similar configuration in each network policy when test creates 
